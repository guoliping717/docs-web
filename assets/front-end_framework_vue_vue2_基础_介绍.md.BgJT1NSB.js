import{_ as i,c as s,o as e,ag as l}from"./chunks/framework.BRw2fNsA.js";const u=JSON.parse('{"title":"介绍","description":"","frontmatter":{"prev":false,"next":false},"headers":[],"relativePath":"front-end/framework/vue/vue2/基础/介绍.md","filePath":"front-end/framework/vue/vue2/基础/介绍.md"}'),t={name:"front-end/framework/vue/vue2/基础/介绍.md"};function n(h,a,r,p,k,o){return e(),s("div",null,a[0]||(a[0]=[l(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><h2 id="vue-js-是什么" tabindex="-1">Vue.js 是什么? <a class="header-anchor" href="#vue-js-是什么" aria-label="Permalink to &quot;Vue.js 是什么?&quot;">​</a></h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。</p><p>如果你想在深入学习 Vue 之前对它有更多了解，Vue官方<a id="modal-player" href="#">制作了一个视频</a>，带您了解其核心概念和一个示例工程。</p><p>如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看<a href="./comparison.html">对比其它框架</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本文档假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p></div><h2 id="框架定义与定位" tabindex="-1">框架定义与定位 <a class="header-anchor" href="#框架定义与定位" aria-label="Permalink to &quot;框架定义与定位&quot;">​</a></h2><p>Vue 2.x 是 渐进式 JavaScript 框架 的经典版本（2016-2023 主流版本），专注于构建用户界面。其核心特点包括：</p><ul><li>响应式数据绑定：通过 Object.defineProperty 实现数据驱动视图更新</li><li>组件化开发：支持单文件组件（.vue 文件）和模块化复用</li><li>轻量级设计：运行时仅 23KB（gzip 压缩后），适合快速集成</li></ul><h2 id="核心工作机制" tabindex="-1">核心工作机制 <a class="header-anchor" href="#核心工作机制" aria-label="Permalink to &quot;核心工作机制&quot;">​</a></h2><ul><li>响应式系统</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据劫持原理示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 依赖收集 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 触发更新 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>局限性：无法检测对象/数组的深层变化，需配合 Vue.set 或数组变异方法</li></ul><h2 id="虚拟-dom-优化" tabindex="-1">虚拟 DOM 优化 <a class="header-anchor" href="#虚拟-dom-优化" aria-label="Permalink to &quot;虚拟 DOM 优化&quot;">​</a></h2><ul><li>Diff 算法：通过同级节点比对减少 DOM 操作</li><li>性能瓶颈：超大规模组件树（&gt;10K 节点）渲染效率低于现代框架</li></ul><h2 id="典型应用场景-2025-年视角" tabindex="-1">典型应用场景（2025 年视角） <a class="header-anchor" href="#典型应用场景-2025-年视角" aria-label="Permalink to &quot;典型应用场景（2025 年视角）&quot;">​</a></h2><ul><li>遗留系统维护：企业级旧项目（如金融、政务系统）的迭代开发</li><li>混合开发模式：与 jQuery 或其他传统库共存的项目改造</li><li>教育领域：前端教学中的经典框架案例研究</li></ul><h2 id="学习价值-2025-年" tabindex="-1">学习价值（2025 年） <a class="header-anchor" href="#学习价值-2025-年" aria-label="Permalink to &quot;学习价值（2025 年）&quot;">​</a></h2><ul><li>理解框架设计：组件生命周期、事件机制等核心概念仍适用</li><li>代码迁移技能：掌握旧项目现代化改造方法论</li><li>架构思维训练：通过对比学习响应式编程的演进路径</li></ul>`,19)]))}const c=i(t,[["render",n]]);export{u as __pageData,c as default};
