import{_ as i,c as o,o as t,ag as n}from"./chunks/framework.BRw2fNsA.js";const c=JSON.parse('{"title":"Markdown","description":"","frontmatter":{"prev":false,"next":false,"aside":false},"headers":[],"relativePath":"tools/Markdown/基础/1-简介.md","filePath":"tools/Markdown/基础/1-简介.md"}'),l={name:"tools/Markdown/基础/1-简介.md"};function s(r,a,e,d,h,k){return t(),o("div",null,a[0]||(a[0]=[n('<h1 id="markdown" tabindex="-1">Markdown <a class="header-anchor" href="#markdown" aria-label="Permalink to &quot;Markdown&quot;">​</a></h1><h2 id="markdown是什么" tabindex="-1">Markdown是什么？ <a class="header-anchor" href="#markdown是什么" aria-label="Permalink to &quot;Markdown是什么？&quot;">​</a></h2><ul><li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</li><li>Markdown 的设计理念是&quot;易读易写&quot;，让人们能够使用简单的纯文本格式来编写结构化文档。</li><li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 .md, .markdown。</li></ul><h2 id="markdown-的核心特点" tabindex="-1">Markdown 的核心特点 <a class="header-anchor" href="#markdown-的核心特点" aria-label="Permalink to &quot;Markdown 的核心特点&quot;">​</a></h2><ul><li><strong>简洁性</strong>：使用直观的符号来表示格式，比如用 # 表示标题，用 * 表示列表项。这些符号在视觉上就能传达其含义，即使不进行渲染也具有良好的可读性。</li><li><strong>可读性</strong>：即使是纯文本形式的 Markdown 文档，也能清晰地展现文档的结构和层次。读者无需专门的软件就能理解内容的组织方式。</li><li><strong>便携性</strong>：Markdown 文件是纯文本格式，可以在任何文本编辑器中打开和编辑，不依赖特定的软件或操作系统。</li><li><strong>转换性</strong>：可以轻松转换为 HTML、PDF、Word 文档等多种格式，满足不同的发布需求。</li></ul><h2 id="轻量级标记语言的概念" tabindex="-1">轻量级标记语言的概念 <a class="header-anchor" href="#轻量级标记语言的概念" aria-label="Permalink to &quot;轻量级标记语言的概念&quot;">​</a></h2><p>标记语言是一种用特定符号来描述文档结构和格式的语言。传统的标记语言如 HTML 功能强大但语法复杂，而轻量级标记语言则简化了这一过程。</p><p>与 HTML 相比，Markdown 的优势在于：</p><ul><li>学习成本低，几分钟就能掌握基本语法</li><li>编写效率高，无需输入复杂的标签</li><li>专注内容，而非格式细节</li><li>版本控制友好，便于协作和变更追踪</li></ul><h2 id="markdown-与-html-的关系" tabindex="-1">Markdown 与 HTML 的关系 <a class="header-anchor" href="#markdown-与-html-的关系" aria-label="Permalink to &quot;Markdown 与 HTML 的关系&quot;">​</a></h2><p>Markdown 并不是 HTML 的替代品，而是 HTML 的简化版本。实际上，Markdown 的最终目标就是转换为 HTML。两者的关系可以这样理解：</p><p>Markdown 源码 → 解析器 → HTML 输出 → 浏览器渲染 例如，当你写下：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 这是一个标题</span></span></code></pre></div><p>它会被转换为：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这是一个标题&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>重要的是，在 Markdown 中你可以直接使用 HTML 标签，这为复杂格式提供了灵活性。当 Markdown 的基础语法无法满足需求时，可以嵌入 HTML 代码来实现特定效果。</p>',16)]))}const w=i(l,[["render",s]]);export{c as __pageData,w as default};
