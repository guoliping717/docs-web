import{_ as i,c as t,o as a,ag as e}from"./chunks/framework.BRw2fNsA.js";const c=JSON.parse('{"title":"Prettier","description":"","frontmatter":{"prev":false,"next":false},"headers":[],"relativePath":"tools/prettier/介绍/Prettier 是什么.md","filePath":"tools/prettier/介绍/Prettier 是什么.md"}'),n={name:"tools/prettier/介绍/Prettier 是什么.md"};function l(p,s,h,r,d,k){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;Prettier&quot;">​</a></h1><h2 id="prettier-是什么" tabindex="-1">Prettier 是什么？ <a class="header-anchor" href="#prettier-是什么" aria-label="Permalink to &quot;Prettier 是什么？&quot;">​</a></h2><p>Prettier 是一个「代码格式化工具」，专注于通过解析代码并重新生成符合统一风格的代码，消除开发者因代码风格（如缩进、换行、引号等）产生的分歧，提升团队协作效率。它支持 JavaScript、TypeScript、CSS、HTML、JSON、Markdown 等多种语言，并提供高度可配置的选项。</p><h2 id="prettier-所有-api-配置及说明" tabindex="-1">Prettier 所有 API 配置及说明 <a class="header-anchor" href="#prettier-所有-api-配置及说明" aria-label="Permalink to &quot;Prettier 所有 API 配置及说明&quot;">​</a></h2><p>以下是 Prettier 的核心配置选项（基于 <a href="https://prettier.io/docs/options.html" target="_blank" rel="noreferrer">Prettier 官方文档</a>，截至 2025 年）：</p><h3 id="一、基本格式配置" tabindex="-1">一、基本格式配置 <a class="header-anchor" href="#一、基本格式配置" aria-label="Permalink to &quot;一、基本格式配置&quot;">​</a></h3><table tabindex="0"><thead><tr><th>配置项</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>printWidth</td><td>number</td><td>80</td><td>每行代码的最大字符数，超过时自动换行。</td></tr><tr><td>tabWidth</td><td>number</td><td>2</td><td>一个制表符对应的空格数（用于缩进）。</td></tr><tr><td>useTabs</td><td>boolean</td><td>false</td><td>是否使用制表符（\\t）缩进，否则使用空格。</td></tr><tr><td>singleQuote</td><td>boolean</td><td>false</td><td>是否使用单引号（默认双引号）。</td></tr><tr><td>doubleQuote</td><td>boolean</td><td>true</td><td>是否使用双引号（与 singleQuote 互斥）。</td></tr><tr><td>trailingComma</td><td>enum</td><td>&quot;es5&quot;</td><td>末尾逗号规则：&quot;none&quot;（无）、&quot;es5&quot;（ES5 允许对象末尾逗号）、&quot;all&quot;（所有情况）。</td></tr><tr><td>bracketSpacing</td><td>boolean</td><td>true</td><td>对象字面量的大括号内是否保留空格（如 { a: 1 } vs {a: 1}）。</td></tr><tr><td>jsxBracketSameLine</td><td>boolean</td><td>false</td><td>JSX 标签的右大括号是否与最后一行代码同线（适用于多行 JSX）。</td></tr><tr><td>arrowParens</td><td>enum</td><td>&quot;avoid&quot;</td><td>箭头函数参数是否需要括号：&quot;avoid&quot;（可选时省略，如 x =&gt; x）、&quot;always&quot;（总是保留）。</td></tr></tbody></table><h3 id="二、代码风格配置" tabindex="-1">二、代码风格配置 <a class="header-anchor" href="#二、代码风格配置" aria-label="Permalink to &quot;二、代码风格配置&quot;">​</a></h3><table tabindex="0"><thead><tr><th>配置项</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>semi</td><td>boolean</td><td>true</td><td>是否在语句末尾添加分号。</td></tr><tr><td>quoteProps</td><td>enum</td><td>&quot;as-needed&quot;</td><td>对象属性引号规则：&quot;as-needed&quot;（仅必要时加引号）、&quot;always&quot;（总是加引号）、&quot;never&quot;（从不加引号）。</td></tr><tr><td>jsxSingleQuote</td><td>boolean</td><td>false</td><td>JSX 中是否使用单引号（默认双引号）。</td></tr><tr><td>requirePragma</td><td>boolean</td><td>false</td><td>是否仅格式化包含 @format 注释的文件。</td></tr><tr><td>insertPragma</td><td>boolean</td><td>false</td><td>是否在文件顶部插入 @format 注释（需配合 requirePragma）。</td></tr><tr><td>proseWrap</td><td>enum</td><td>&quot;preserve&quot;</td><td>Markdown 文本换行规则：&quot;preserve&quot;（保留原换行）、&quot;always&quot;（强制按 printWidth 换行）。</td></tr><tr><td>htmlWhitespaceSensitivity</td><td>enum</td><td>&quot;css&quot;</td><td>HTML 空白敏感度：&quot;css&quot;（类似 CSS 规则）、&quot;strict&quot;（严格模式）、&quot;ignore&quot;（忽略空白）。</td></tr></tbody></table><h3 id="三、特殊语言处理" tabindex="-1">三、特殊语言处理 <a class="header-anchor" href="#三、特殊语言处理" aria-label="Permalink to &quot;三、特殊语言处理&quot;">​</a></h3><table tabindex="0"><thead><tr><th>配置项</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>vueIndentScriptAndStyle</td><td>boolean</td><td>false</td><td>Vue 组件中 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 标签是否单独缩进。</td></tr><tr><td>singleAttributePerLine</td><td>boolean</td><td>false</td><td>HTML/JSX 中是否将单个属性放在新行（适用于多属性标签）。</td></tr><tr><td>tsxSingleQuote</td><td>boolean</td><td>false</td><td>TSX 中是否使用单引号（默认双引号）。</td></tr><tr><td>tabToSpaceConversion</td><td>object</td><td>{}</td><td>制表符转空格的规则（高级配置，用于混合缩进场景）。</td></tr></tbody></table><h3 id="四、插件与扩展" tabindex="-1">四、插件与扩展 <a class="header-anchor" href="#四、插件与扩展" aria-label="Permalink to &quot;四、插件与扩展&quot;">​</a></h3><p>Prettier 支持通过插件扩展对特定语言的格式化（如 CSS 预处理器、GraphQL 等），需单独安装插件（如 prettier-plugin-sass），无需额外配置项，插件会自动生效。</p><h2 id="如何配置-prettier" tabindex="-1">如何配置 Prettier？ <a class="header-anchor" href="#如何配置-prettier" aria-label="Permalink to &quot;如何配置 Prettier？&quot;">​</a></h2><p>Prettier 支持多种配置方式，优先级从高到低：</p><ol><li>命令行参数（临时覆盖配置）</li><li>项目本地配置文件（推荐）</li><li>用户全局配置文件</li><li>默认值</li></ol><h3 id="_1-创建配置文件" tabindex="-1">1. 创建配置文件 <a class="header-anchor" href="#_1-创建配置文件" aria-label="Permalink to &quot;1. 创建配置文件&quot;">​</a></h3><p>在项目根目录创建以下任意一个文件：</p><ul><li>.prettierrc（JSON 格式）</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;printWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;singleQuote&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>.prettierrc.json（JSON 格式，更清晰）</li><li>.prettierrc.yml/.prettierrc.yaml（YAML 格式）</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">printWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">singleQuote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">semi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><ul><li>.prettierrc.js（JavaScript 格式，支持函数或动态配置）</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  printWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  singleQuote: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prettier-plugin-sass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引用插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>package.json（在 package.json 中添加 prettier 字段）</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;printWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;singleQuote&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-忽略文件-可选" tabindex="-1">2. 忽略文件（可选） <a class="header-anchor" href="#_2-忽略文件-可选" aria-label="Permalink to &quot;2. 忽略文件（可选）&quot;">​</a></h3><p>在项目根目录创建 .prettierignore 文件，指定无需格式化的文件或目录：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules/</span></span>
<span class="line"><span>dist/</span></span>
<span class="line"><span>*.config.js</span></span></code></pre></div><h3 id="_3-命令行工具-cli" tabindex="-1">3. 命令行工具（CLI） <a class="header-anchor" href="#_3-命令行工具-cli" aria-label="Permalink to &quot;3. 命令行工具（CLI）&quot;">​</a></h3><p>安装 Prettier</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 本地安装（推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或全局安装（不推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>常用命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看文件格式化后的结果（不修改文件）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-different</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 格式化单个文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --write</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 格式化所有指定类型的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --write</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;src/**/*.{js,jsx,json}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看当前配置（验证配置是否生效）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .prettierrc.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --check</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/index.js</span></span></code></pre></div><h2 id="如何使用-prettier" tabindex="-1">如何使用 Prettier？ <a class="header-anchor" href="#如何使用-prettier" aria-label="Permalink to &quot;如何使用 Prettier？&quot;">​</a></h2><h3 id="_1-编辑器集成-推荐" tabindex="-1">1. 编辑器集成（推荐） <a class="header-anchor" href="#_1-编辑器集成-推荐" aria-label="Permalink to &quot;1. 编辑器集成（推荐）&quot;">​</a></h3><p>在编辑器中安装 Prettier 插件，实现「保存时自动格式化」：</p><ul><li>VS Code：<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noreferrer">Prettier - Code formatter</a>，并在 settings.json 中配置：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.formatOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prettier.configPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./.prettierrc.json&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指定配置文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>WebStorm/IntelliJ：内置支持，需在设置中启用 Prettier 并关联配置文件。</li><li>Sublime Text：安装 <a href="https://packagecontrol.io/packages/Pretty%20Diff" target="_blank" rel="noreferrer">Pretty Diff</a> 插件</li></ul><h3 id="_2-与-eslint-配合使用" tabindex="-1">2. 与 ESLint 配合使用 <a class="header-anchor" href="#_2-与-eslint-配合使用" aria-label="Permalink to &quot;2. 与 ESLint 配合使用&quot;">​</a></h3><p>Prettier 专注于代码格式，ESLint 专注于代码质量。若两者规则冲突（如换行、引号），需安装 eslint-config-prettier 禁用 ESLint 的格式相关规则：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-config-prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><p>在 ESLint 配置文件（.eslintrc.js）中添加：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;eslint:recommended&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prettier&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确保 &#39;prettier&#39; 在最后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他 ESLint 规则...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_3-作为构建流程的一部分" tabindex="-1">3. 作为构建流程的一部分 <a class="header-anchor" href="#_3-作为构建流程的一部分" aria-label="Permalink to &quot;3. 作为构建流程的一部分&quot;">​</a></h3><p>在 package.json 中添加脚本，在代码提交或构建前自动格式化：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;format&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier --write .&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 格式化所有文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;format:check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier --check .&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 检查格式是否一致（用于 CI/CD）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>配合 husky 和 lint-staged，可在代码提交前自动修复格式问题：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint-staged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;*.{js,jsx,json,css}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier --write&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/pre-commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npx lint-staged&quot;</span></span></code></pre></div>`,52)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
